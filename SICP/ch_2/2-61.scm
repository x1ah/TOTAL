(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (car set)) #t)
        ((< x (car set)) #f)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2)) '()
    (let ((x1 (car set1))
          (x2 (car set2)))
      (cond ((= x1 x2)
             (cons x1
                   (intersection-set (cdr set1)
                                     (cdr set2))))
            ((< x1 x2)
             (intersection-set (cdr set1) set2))
            ((> x1 x2)
             (intersection-set (cdr set1) (cdr set2)))))))

(define (adjoin-set-iter x set pre-set)
  (cond ((element-of-set? x set) set)
        ((< x (car set)) (append pre-set (cons x set)))
        ((> x (car set)) (adjoin-set-iter x (cdr set) (append pre-set (list (car set)))))))

(define (adjoin-set x set)
  (adjoin-set-iter x set '()))
